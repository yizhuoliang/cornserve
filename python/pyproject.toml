[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cornserve"
description = "Easy, fast, and scalable multimodal agentic AI"
authors = [
  { name = "Cornserve Team" },
]
readme = "README.md"
license = { file = "LICENSE" }
classifiers = [
  "Environment :: GPU :: NVIDIA CUDA",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.11"
dependencies = [
  "grpcio-tools==1.71.0",
  "rich",
  "requests",
  "tyro",
  "kubernetes",
  "kubernetes_asyncio",
  "httpx",
  "pydantic>=2.11",
  "opentelemetry-api",
  "opentelemetry-sdk",
  "opentelemetry-exporter-otlp-proto-grpc",
  "websocket-client",
]
dynamic = ["version"]

[project.scripts]
cornserve = "cornserve.cli:main"

[project.optional-dependencies]
sidecar-api = [
  "torch>=2.5.0",
  "opentelemetry-instrumentation-grpc",
  "opentelemetry-instrumentation-threading",
]
sidecar = [
  "torch>=2.5.0",
  "ucxx-cu12",
  "msgspec",
  "opentelemetry-instrumentation-grpc",
]
gateway = [
  "fastapi",
  "uvicorn[standard]",
  "opentelemetry-instrumentation-fastapi",
  "opentelemetry-instrumentation-grpc",
  "opentelemetry-instrumentation-httpx",
  "websocket-client",
]
resource-manager = [
  "opentelemetry-instrumentation-grpc",
]
task-manager = []
task-dispatcher = [
  "fastapi",
  "uvicorn[standard]",
  "opentelemetry-instrumentation-fastapi",
  "opentelemetry-instrumentation-httpx",
  "opentelemetry-instrumentation-grpc",
]
audio = ["librosa"]
eric-no-gpu = [
  "fastapi",
  "uvicorn[standard]",
  "pyzmq",
  "msgspec",
  "psutil",
  "torch>=2.5.0",
  "transformers",
  "huggingface_hub",
  "pillow",
  "opencv-python-headless",
  "einops",
  "cornserve[sidecar-api,audio]",
  "opentelemetry-instrumentation-fastapi",
  "opentelemetry-instrumentation-threading",
]
eric = ["flash-attn", "xformers", "cornserve[eric-no-gpu]"]
eric-audio = ["cornserve[eric,audio]"]
dev-common = [
  "grpcio-tools",
  "pyright!=1.1.401",
  "ruff",
  "pytest",
  "pytest-asyncio",
  "pytest-dependency",
  "cornserve[sidecar-api,gateway,resource-manager,task-manager,task-dispatcher]",
]
dev = ["cornserve[dev-common,sidecar,eric]"]
dev-no-gpu = ["cornserve[dev-common,eric-no-gpu]"]

[tool.setuptools.dynamic]
version = { attr = "cornserve.__version__" }

[tool.ruff]
line-length = 120

[tool.ruff.lint]
pydocstyle.convention = "google"
select = [
  "E",   # pycodestyle error
  "F",   # pyflakes
  "D",   # pydocstyle
  "PL",  # pylint
  "N",   # pep8-naming
  "UP",  # pyupgrade
  "B",   # flake8-bugbear (detects likely bugs)
  "G",   # flake8-logging-format (complains about logging)
  "SIM", # flake8-simplify (suggests code simplifications)
]
exclude = [
  "cornserve/task_executors/eric/models/*.py",
]
ignore = [
  "PLW0603",  # Global statement
  "PLR2004",  # Magic value
  "PLR0912",  # Too many branches
  "PLR0913",  # Too many arguments
  "PLR0915",  # Too many statements
  "PLR0402",  # `import torch.nn as nn` is fine
]

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["F401", "F403"]
"cornserve/services/**/server.py" = ["N802"]
"cornserve/services/**/grpc.py" = ["N802"]

[tool.pyright]
exclude = [
  "**/*_pb2.py",
  "**/*_pb2_grpc.py",
  "cornserve/task_executors/eric/models/*.py",
]

[tool.pytest.ini_options]
addopts = "-v"
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff.lint.isort]
known-first-party = ["cornserve"]
